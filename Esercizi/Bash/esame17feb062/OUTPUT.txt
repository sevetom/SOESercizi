/* Maximum length of printf output for a NaN.  */
extern int remove (const char *__filename) __THROW;
extern int rename (const char *__old, const char *__new) __THROW;
extern int renameat (int __oldfd, const char *__old, int __newfd,
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
		      const char *__new, unsigned int __flags) __THROW;
   This function is a possible cancellation point and therefore not
extern int fclose (FILE *__stream);
   This function is a possible cancellation point and therefore not
   This function is a possible cancellation point and therefore not
extern int fflush (FILE *__stream);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fflush_unlocked (FILE *__stream);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fcloseall (void);
   This function is a possible cancellation point and therefore not
   This function is a possible cancellation point and therefore not
extern FILE *fdopen (int __fd, const char *__modes) __THROW
/* Open a stream that writes into a malloc'd buffer that is expanded as
   else allocate an internal buffer N bytes long.  */
extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
		    int __modes, size_t __n) __THROW;
   This function is a possible cancellation point and therefore not
extern int fprintf (FILE *__restrict __stream,
   This function is a possible cancellation point and therefore not
extern int printf (const char *__restrict __format, ...);
extern int sprintf (char *__restrict __s,
   This function is a possible cancellation point and therefore not
extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
   This function is a possible cancellation point and therefore not
extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);
extern int vsprintf (char *__restrict __s, const char *__restrict __format,
extern int snprintf (char *__restrict __s, size_t __maxlen,
     __THROWNL __attribute__ ((__format__ (__printf__, 3, 4)));
extern int vsnprintf (char *__restrict __s, size_t __maxlen,
     __THROWNL __attribute__ ((__format__ (__printf__, 3, 0)));
extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 0))) __wur;
extern int __asprintf (char **__restrict __ptr,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3))) __wur;
extern int asprintf (char **__restrict __ptr,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3))) __wur;
extern int vdprintf (int __fd, const char *__restrict __fmt,
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));
   This function is a possible cancellation point and therefore not
extern int fscanf (FILE *__restrict __stream,
   This function is a possible cancellation point and therefore not
extern int scanf (const char *__restrict __format, ...) __wur;
extern int sscanf (const char *__restrict __s,
extern int __REDIRECT (fscanf, (FILE *__restrict __stream,
extern int __REDIRECT (scanf, (const char *__restrict __format, ...),
extern int __REDIRECT_NTH (sscanf, (const char *__restrict __s,
extern int __isoc99_fscanf (FILE *__restrict __stream,
extern int __isoc99_scanf (const char *__restrict __format, ...) __wur;
extern int __isoc99_sscanf (const char *__restrict __s,
/* Read formatted input from S into argument list ARG.
   This function is a possible cancellation point and therefore not
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
/* Read formatted input from stdin into argument list ARG.
   This function is a possible cancellation point and therefore not
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
/* Read formatted input from S into argument list ARG.  */
extern int vsscanf (const char *__restrict __s,
extern int __REDIRECT (vfscanf,
extern int __REDIRECT (vscanf, (const char *__restrict __format,
extern int __REDIRECT_NTH (vsscanf,
extern int __isoc99_vfscanf (FILE *__restrict __s,
extern int __isoc99_vscanf (const char *__restrict __format,
extern int __isoc99_vsscanf (const char *__restrict __s,
   These functions are possible cancellation points and therefore not
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);
   This function is a possible cancellation point and therefore not
extern int getchar (void);
   These functions are possible cancellation points and therefore not
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fgetc_unlocked (FILE *__stream);
   These functions are possible cancellation points and therefore not
   These functions is a possible cancellation point and therefore not
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);
   This function is a possible cancellation point and therefore not
extern int putchar (int __c);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fputc_unlocked (int __c, FILE *__stream);
   These functions are possible cancellation points and therefore not
extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);
/* Get a word (int) from STREAM.  */
extern int getw (FILE *__stream);
/* Write a word (int) to STREAM.  */
extern int putw (int __w, FILE *__stream);
   This function is a possible cancellation point and therefore not
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
   This function is a possible cancellation point and therefore not
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern char *fgets_unlocked (char *__restrict __s, int __n,
/* Read up to (and including) a DELIMITER from STREAM into *LINEPTR
   (and null-terminate it). *LINEPTR is a pointer returned from malloc (or
   NULL), pointing to *N characters of space.  It is realloc'd as
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
                             size_t *__restrict __n, int __delimiter,
                           size_t *__restrict __n, int __delimiter,
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   This function is a possible cancellation point and therefore not
extern int fputs (const char *__restrict __s, FILE *__restrict __stream);
   This function is a possible cancellation point and therefore not
extern int puts (const char *__s);
   This function is a possible cancellation point and therefore not
extern int ungetc (int __c, FILE *__stream);
   This function is a possible cancellation point and therefore not
   This function is a possible cancellation point and therefore not
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fputs_unlocked (const char *__restrict __s,
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
   This function is a possible cancellation point and therefore not
extern int fseek (FILE *__stream, long int __off, int __whence);
   This function is a possible cancellation point and therefore not
extern long int ftell (FILE *__stream) __wur;
   This function is a possible cancellation point and therefore not
   more adequate interface for the two functions above which deal with
   file offset.  `long int' is not the right type.  These definitions
   This function is a possible cancellation point and therefore not
extern int fseeko (FILE *__stream, __off_t __off, int/* Maximum length of printf output for a NaN.  */
extern int remove (const char *__filename) __THROW;
extern int rename (const char *__old, const char *__new) __THROW;
extern int renameat (int __oldfd, const char *__old, int __newfd,
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
		      const char *__new, unsigned int __flags) __THROW;
   This function is a possible cancellation point and therefore not
extern int fclose (FILE *__stream);
   This function is a possible cancellation point and therefore not
   This function is a possible cancellation point and therefore not
extern int fflush (FILE *__stream);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fflush_unlocked (FILE *__stream);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fcloseall (void);
   This function is a possible cancellation point and therefore not
   This function is a possible cancellation point and therefore not
extern FILE *fdopen (int __fd, const char *__modes) __THROW
/* Open a stream that writes into a malloc'd buffer that is expanded as
   else allocate an internal buffer N bytes long.  */
extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
		    int __modes, size_t __n) __THROW;
   This function is a possible cancellation point and therefore not
extern int fprintf (FILE *__restrict __stream,
   This function is a possible cancellation point and therefore not
extern int printf (const char *__restrict __format, ...);
extern int sprintf (char *__restrict __s,
   This function is a possible cancellation point and therefore not
extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
   This function is a possible cancellation point and therefore not
extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);
extern int vsprintf (char *__restrict __s, const char *__restrict __format,
extern int snprintf (char *__restrict __s, size_t __maxlen,
     __THROWNL __attribute__ ((__format__ (__printf__, 3, 4)));
extern int vsnprintf (char *__restrict __s, size_t __maxlen,
     __THROWNL __attribute__ ((__format__ (__printf__, 3, 0)));
extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 0))) __wur;
extern int __asprintf (char **__restrict __ptr,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3))) __wur;
extern int asprintf (char **__restrict __ptr,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3))) __wur;
extern int vdprintf (int __fd, const char *__restrict __fmt,
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));
   This function is a possible cancellation point and therefore not
extern int fscanf (FILE *__restrict __stream,
   This function is a possible cancellation point and therefore not
extern int scanf (const char *__restrict __format, ...) __wur;
extern int sscanf (const char *__restrict __s,
extern int __REDIRECT (fscanf, (FILE *__restrict __stream,
extern int __REDIRECT (scanf, (const char *__restrict __format, ...),
extern int __REDIRECT_NTH (sscanf, (const char *__restrict __s,
extern int __isoc99_fscanf (FILE *__restrict __stream,
extern int __isoc99_scanf (const char *__restrict __format, ...) __wur;
extern int __isoc99_sscanf (const char *__restrict __s,
/* Read formatted input from S into argument list ARG.
   This function is a possible cancellation point and therefore not
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
/* Read formatted input from stdin into argument list ARG.
   This function is a possible cancellation point and therefore not
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
/* Read formatted input from S into argument list ARG.  */
extern int vsscanf (const char *__restrict __s,
exter __whence);
   This function is a possible cancellation point and therefore not
extern int __REDIRECT (fseeko,
		       (FILE *__stream, __off64_t __off, int __whence),
   This function is a possible cancellation point and therefore not
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);
   This function is a possible cancellation point and therefore not
extern int fsetpos (FILE *__stream, const fpos_t *__pos);
extern int __REDIRECT (fgetpos, (FILE *__restrict __stream,
extern int __REDIRECT (fsetpos,
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);
extern int feof (FILE *__stream) __THROW __wur;
extern int ferror (FILE *__stream) __THROW __wur;
extern int feof_unlocked (FILE *__stream) __THROW __wur;
extern int ferror_unlocked (FILE *__stream) __THROW __wur;
/* Print a message describing the meaning of the value of errno.
   This function is a possible cancellation point and therefore not
extern int fileno (FILE *__stream) __THROW __wur;
extern int fileno_unlocked (FILE *__stream) __THROW __wur;
   This function is a possible cancellation point and therefore not
extern int pclose (FILE *__stream);
   This function is a possible cancellation point and therefore not
extern int obstack_printf (struct obstack *__restrict __obstack,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 0)));
extern int ftrylockfile (FILE *__stream) __THROW __wur;
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
n int __REDIRECT (vfscanf,
extern int __REDIRECT (vscanf, (const char *__restrict __format,
extern int __REDIRECT_NTH (vsscanf,
extern int __isoc99_vfscanf (FILE *__restrict __s,
extern int __isoc99_vscanf (const char *__restrict __format,
extern int __isoc99_vsscanf (const char *__restrict __s,
   These functions are possible cancellation points and therefore not
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);
   This function is a possible cancellation point and therefore not
extern int getchar (void);
   These functions are possible cancellation points and therefore not
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fgetc_unlocked (FILE *__stream);
   These functions are possible cancellation points and therefore not
   These functions is a possible cancellation point and therefore not
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);
   This function is a possible cancellation point and therefore not
extern int putchar (int __c);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fputc_unlocked (int __c, FILE *__stream);
   These functions are possible cancellation points and therefore not
extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);
/* Get a word (int) from STREAM.  */
extern int getw (FILE *__stream);
/* Write a word (int) to STREAM.  */
extern int putw (int __w, FILE *__stream);
   This function is a possible cancellation point and therefore not
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
   This function is a possible cancellation point and therefore not
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern char *fgets_unlocked (char *__restrict __s, int __n,
/* Read up to (and including) a DELIMITER from STREAM into *LINEPTR
   (and null-terminate it). *LINEPTR is a pointer returned from malloc (or
   NULL), pointing to *N characters of space.  It is realloc'd as
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
                             size_t *__restrict __n, int __delimiter,
                           size_t *__restrict __n, int __delimiter,
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   This function is a possible cancellation point and therefore not
extern int fputs (const char *__restrict __s, FILE *__restrict __stream);
   This function is a possible cancellation point and therefore not
extern int puts (const char *__s);
   This function is a possible cancellation point and therefore not
extern int ungetc (int __c, FILE *__stream);
   This function is a possible cancellation point and therefore not
   This function is a possible cancellation point and therefore not
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fputs_unlocked (const char *__restrict __s,
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
   This function is a possible cancellation point and therefore not
extern int fseek (FILE *__stream, long int __off, int __whence);
   This function is a possible cancellation point and therefore not
extern long int ftell (FILE *__stream) __wur;
   This function is a possible cancellation point and therefore not
   more adequate interface for the two functions above which deal with
   file offset.  `long int' is not the right type.  These definitions
   This function is a possible cancellation point and therefore not
extern int fseeko (FILE *__stream, __off_t __off, int/* Maximum length of printf output for a NaN.  */
extern int remove (const char *__filename) __THROW;
extern int rename (const char *__old, const char *__new) __THROW;
extern int renameat (int __oldfd, const char *__old, int __newfd,
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
		      const char *__new, unsigned int __flags) __THROW;
   This function is a possible cancellation point and therefore not
extern int fclose (FILE *__stream);
   This function is a possible cancellation point and therefore not
   This function is a possible cancellation point and therefore not
extern int fflush (FILE *__stream);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fflush_unlocked (FILE *__stream);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fcloseall (void);
   This function is a possible cancellation point and therefore not
   This function is a possible cancellation point and therefore not
extern FILE *fdopen (int __fd, const char *__modes) __THROW
/* Open a stream that writes into a malloc'd buffer that is expanded as
   else allocate an internal buffer N bytes long.  */
extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
		    int __modes, size_t __n) __THROW;
   This function is a possible cancellation point and therefore not
extern int fprintf (FILE *__restrict __stream,
   This function is a possible cancellation point and therefore not
extern int printf (const char *__restrict __format, ...);
extern int sprintf (char *__restrict __s,
   This function is a possible cancellation point and therefore not
extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
   This function is a possible cancellation point and therefore not
extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);
extern int vsprintf (char *__restrict __s, const char *__restrict __format,
extern int snprintf (char *__restrict __s, size_t __maxlen,
     __THROWNL __attribute__ ((__format__ (__printf__, 3, 4)));
extern int vsnprintf (char *__restrict __s, size_t __maxlen,
     __THROWNL __attribute__ ((__format__ (__printf__, 3, 0)));
extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 0))) __wur;
extern int __asprintf (char **__restrict __ptr,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3))) __wur;
extern int asprintf (char **__restrict __ptr,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3))) __wur;
extern int vdprintf (int __fd, const char *__restrict __fmt,
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));
   This function is a possible cancellation point and therefore not
extern int fscanf (FILE *__restrict __stream,
   This function is a possible cancellation point and therefore not
extern int scanf (const char *__restrict __format, ...) __wur;
extern int sscanf (const char *__restrict __s,
extern int __REDIRECT (fscanf, (FILE *__restrict __stream,
extern int __REDIRECT (scanf, (const char *__restrict __format, ...),
extern int __REDIRECT_NTH (sscanf, (const char *__restrict __s,
extern int __isoc99_fscanf (FILE *__restrict __stream,
extern int __isoc99_scanf (const char *__restrict __format, ...) __wur;
extern int __isoc99_sscanf (const char *__restrict __s,
/* Read formatted input from S into argument list ARG.
   This function is a possible cancellation point and therefore not
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
/* Read formatted input from stdin into argument list ARG.
   This function is a possible cancellation point and therefore not
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
/* Read formatted input from S into argument list ARG.  */
extern int vsscanf (const char *__restrict __s,
exter __whence);
   This function is a possible cancellation point and therefore not
extern int __REDIRECT (fseeko,
		       (FILE *__stream, __off64_t __off, int __whence),
   This function is a possible cancellation point and therefore not
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);
   This function is a possible cancellation point and therefore not
extern int fsetpos (FILE *__stream, const fpos_t *__pos);
extern int __REDIRECT (fgetpos, (FILE *__restrict __stream,
extern int __REDIRECT (fsetpos,
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);
extern int feof (FILE *__stream) __THROW __wur;
extern int ferror (FILE *__stream) __THROW __wur;
extern int feof_unlocked (FILE *__stream) __THROW __wur;
extern int ferror_unlocked (FILE *__stream) __THROW __wur;
/* Print a message describing the meaning of the value of errno.
   This function is a possible cancellation point and therefore not
extern int fileno (FILE *__stream) __THROW __wur;
extern int fileno_unlocked (FILE *__stream) __THROW __wur;
   This function is a possible cancellation point and therefore not
extern int pclose (FILE *__stream);
   This function is a possible cancellation point and therefore not
extern int obstack_printf (struct obstack *__restrict __obstack,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 0)));
extern int ftrylockfile (FILE *__stream) __THROW __wur;
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
n int __REDIRECT (vfscanf,
extern int __REDIRECT (vscanf, (const char *__restrict __format,
extern int __REDIRECT_NTH (vsscanf,
extern int __isoc99_vfscanf (FILE *__restrict __s,
extern int __isoc99_vscanf (const char *__restrict __format,
extern int __isoc99_vsscanf (const char *__restrict __s,
   These functions are possible cancellation points and therefore not
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);
   This function is a possible cancellation point and therefore not
extern int getchar (void);
   These functions are possible cancellation points and therefore not
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fgetc_unlocked (FILE *__stream);
   These functions are possible cancellation points and therefore not
   These functions is a possible cancellation point and therefore not
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);
   This function is a possible cancellation point and therefore not
extern int putchar (int __c);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fputc_unlocked (int __c, FILE *__stream);
   These functions are possible cancellation points and therefore not
extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);
/* Get a word (int) from STREAM.  */
extern int getw (FILE *__stream);
/* Write a word (int) to STREAM.  */
extern int putw (int __w, FILE *__stream);
   This function is a possible cancellation point and therefore not
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
   This function is a possible cancellation point and therefore not
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern char *fgets_unlocked (char *__restrict __s, int __n,
/* Read up to (and including) a DELIMITER from STREAM into *LINEPTR
   (and null-terminate it). *LINEPTR is a pointer returned from malloc (or
   NULL), pointing to *N characters of space.  It is realloc'd as
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
                             size_t *__restrict __n, int __delimiter,
                           size_t *__restrict __n, int __delimiter,
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   This function is a possible cancellation point and therefore not
extern int fputs (const char *__restrict __s, FILE *__restrict __stream);
   This function is a possible cancellation point and therefore not
extern int puts (const char *__s);
   This function is a possible cancellation point and therefore not
extern int ungetc (int __c, FILE *__stream);
   This function is a possible cancellation point and therefore not
   This function is a possible cancellation point and therefore not
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fputs_unlocked (const char *__restrict __s,
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
   This function is a possible cancellation point and therefore not
extern int fseek (FILE *__stream, long int __off, int __whence);
   This function is a possible cancellation point and therefore not
extern long int ftell (FILE *__stream) __wur;
   This function is a possible cancellation point and therefore not
   more adequate interface for the two functions above which deal with
   file offset.  `long int' is not the right type.  These definitions
   This function is a possible cancellation point and therefore not
extern int fseeko (FILE *__stream, __off_t __off, int/* Maximum length of printf output for a NaN.  */
extern int remove (const char *__filename) __THROW;
extern int rename (const char *__old, const char *__new) __THROW;
extern int renameat (int __oldfd, const char *__old, int __newfd,
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
		      const char *__new, unsigned int __flags) __THROW;
   This function is a possible cancellation point and therefore not
extern int fclose (FILE *__stream);
   This function is a possible cancellation point and therefore not
   This function is a possible cancellation point and therefore not
extern int fflush (FILE *__stream);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fflush_unlocked (FILE *__stream);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fcloseall (void);
   This function is a possible cancellation point and therefore not
   This function is a possible cancellation point and therefore not
extern FILE *fdopen (int __fd, const char *__modes) __THROW
/* Open a stream that writes into a malloc'd buffer that is expanded as
   else allocate an internal buffer N bytes long.  */
extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
		    int __modes, size_t __n) __THROW;
   This function is a possible cancellation point and therefore not
extern int fprintf (FILE *__restrict __stream,
   This function is a possible cancellation point and therefore not
extern int printf (const char *__restrict __format, ...);
extern int sprintf (char *__restrict __s,
   This function is a possible cancellation point and therefore not
extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
   This function is a possible cancellation point and therefore not
extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);
extern int vsprintf (char *__restrict __s, const char *__restrict __format,
extern int snprintf (char *__restrict __s, size_t __maxlen,
     __THROWNL __attribute__ ((__format__ (__printf__, 3, 4)));
extern int vsnprintf (char *__restrict __s, size_t __maxlen,
     __THROWNL __attribute__ ((__format__ (__printf__, 3, 0)));
extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 0))) __wur;
extern int __asprintf (char **__restrict __ptr,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3))) __wur;
extern int asprintf (char **__restrict __ptr,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3))) __wur;
extern int vdprintf (int __fd, const char *__restrict __fmt,
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));
   This function is a possible cancellation point and therefore not
extern int fscanf (FILE *__restrict __stream,
   This function is a possible cancellation point and therefore not
extern int scanf (const char *__restrict __format, ...) __wur;
extern int sscanf (const char *__restrict __s,
extern int __REDIRECT (fscanf, (FILE *__restrict __stream,
extern int __REDIRECT (scanf, (const char *__restrict __format, ...),
extern int __REDIRECT_NTH (sscanf, (const char *__restrict __s,
extern int __isoc99_fscanf (FILE *__restrict __stream,
extern int __isoc99_scanf (const char *__restrict __format, ...) __wur;
extern int __isoc99_sscanf (const char *__restrict __s,
/* Read formatted input from S into argument list ARG.
   This function is a possible cancellation point and therefore not
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
/* Read formatted input from stdin into argument list ARG.
   This function is a possible cancellation point and therefore not
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
/* Read formatted input from S into argument list ARG.  */
extern int vsscanf (const char *__restrict __s,
exter __whence);
   This function is a possible cancellation point and therefore not
extern int __REDIRECT (fseeko,
		       (FILE *__stream, __off64_t __off, int __whence),
   This function is a possible cancellation point and therefore not
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);
   This function is a possible cancellation point and therefore not
extern int fsetpos (FILE *__stream, const fpos_t *__pos);
extern int __REDIRECT (fgetpos, (FILE *__restrict __stream,
extern int __REDIRECT (fsetpos,
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);
extern int feof (FILE *__stream) __THROW __wur;
extern int ferror (FILE *__stream) __THROW __wur;
extern int feof_unlocked (FILE *__stream) __THROW __wur;
extern int ferror_unlocked (FILE *__stream) __THROW __wur;
/* Print a message describing the meaning of the value of errno.
   This function is a possible cancellation point and therefore not
extern int fileno (FILE *__stream) __THROW __wur;
extern int fileno_unlocked (FILE *__stream) __THROW __wur;
   This function is a possible cancellation point and therefore not
extern int pclose (FILE *__stream);
   This function is a possible cancellation point and therefore not
extern int obstack_printf (struct obstack *__restrict __obstack,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 0)));
extern int ftrylockfile (FILE *__stream) __THROW __wur;
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
n int __REDIRECT (vfscanf,
extern int __REDIRECT (vscanf, (const char *__restrict __format,
extern int __REDIRECT_NTH (vsscanf,
extern int __isoc99_vfscanf (FILE *__restrict __s,
extern int __isoc99_vscanf (const char *__restrict __format,
extern int __isoc99_vsscanf (const char *__restrict __s,
   These functions are possible cancellation points and therefore not
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);
   This function is a possible cancellation point and therefore not
extern int getchar (void);
   These functions are possible cancellation points and therefore not
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fgetc_unlocked (FILE *__stream);
   These functions are possible cancellation points and therefore not
   These functions is a possible cancellation point and therefore not
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);
   This function is a possible cancellation point and therefore not
extern int putchar (int __c);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fputc_unlocked (int __c, FILE *__stream);
   These functions are possible cancellation points and therefore not
extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);
/* Get a word (int) from STREAM.  */
extern int getw (FILE *__stream);
/* Write a word (int) to STREAM.  */
extern int putw (int __w, FILE *__stream);
   This function is a possible cancellation point and therefore not
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
   This function is a possible cancellation point and therefore not
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern char *fgets_unlocked (char *__restrict __s, int __n,
/* Read up to (and including) a DELIMITER from STREAM into *LINEPTR
   (and null-terminate it). *LINEPTR is a pointer returned from malloc (or
   NULL), pointing to *N characters of space.  It is realloc'd as
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
                             size_t *__restrict __n, int __delimiter,
                           size_t *__restrict __n, int __delimiter,
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   This function is a possible cancellation point and therefore not
extern int fputs (const char *__restrict __s, FILE *__restrict __stream);
   This function is a possible cancellation point and therefore not
extern int puts (const char *__s);
   This function is a possible cancellation point and therefore not
extern int ungetc (int __c, FILE *__stream);
   This function is a possible cancellation point and therefore not
   This function is a possible cancellation point and therefore not
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fputs_unlocked (const char *__restrict __s,
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
   This function is a possible cancellation point and therefore not
extern int fseek (FILE *__stream, long int __off, int __whence);
   This function is a possible cancellation point and therefore not
extern long int ftell (FILE *__stream) __wur;
   This function is a possible cancellation point and therefore not
   more adequate interface for the two functions above which deal with
   file offset.  `long int' is not the right type.  These definitions
   This function is a possible cancellation point and therefore not
extern int fseeko (FILE *__stream, __off_t __off, int __whence);
   This function is a possible cancellation point and therefore not
extern int __REDIRECT (fseeko,
		       (FILE *__stream, __off64_t __off, int __whence),
   This function is a possible cancellation point and therefore not
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);
   This function is a possible cancellation point and therefore not
extern int fsetpos (FILE *__stream, const fpos_t *__pos);
extern int __REDIRECT (fgetpos, (FILE *__restrict __stream,
extern int __REDIRECT (fsetpos,
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);
extern int feof (FILE *__stream) __THROW __wur;
extern int ferror (FILE *__stream) __THROW __wur;
extern int feof_unlocked (FILE *__stream) __THROW __wur;
extern int ferror_unlocked (FILE *__stream) __THROW __wur;
/* Print a message describing the meaning of the value of errno.
   This function is a possible cancellation point and therefore not
extern int fileno (FILE *__stream) __THROW __wur;
extern int fileno_unlocked (FILE *__stream) __THROW __wur;
   This function is a possible cancellation point and therefore not
extern int pclose (FILE *__stream);
   This function is a possible cancellation point and therefore not
extern int obstack_printf (struct obstack *__restrict __obstack,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 0)));
extern int ftrylockfile (FILE *__stream) __THROW __wur;
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
/* Maximum length of printf output for a NaN.  */
extern int remove (const char *__filename) __THROW;
extern int rename (const char *__old, const char *__new) __THROW;
extern int renameat (int __oldfd, const char *__old, int __newfd,
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
		      const char *__new, unsigned int __flags) __THROW;
   This function is a possible cancellation point and therefore not
extern int fclose (FILE *__stream);
   This function is a possible cancellation point and therefore not
   This function is a possible cancellation point and therefore not
extern int fflush (FILE *__stream);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fflush_unlocked (FILE *__stream);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fcloseall (void);
   This function is a possible cancellation point and therefore not
   This function is a possible cancellation point and therefore not
extern FILE *fdopen (int __fd, const char *__modes) __THROW
/* Open a stream that writes into a malloc'd buffer that is expanded as
   else allocate an internal buffer N bytes long.  */
extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
		    int __modes, size_t __n) __THROW;
   This function is a possible cancellation point and therefore not
extern int fprintf (FILE *__restrict __stream,
   This function is a possible cancellation point and therefore not
extern int printf (const char *__restrict __format, ...);
extern int sprintf (char *__restrict __s,
   This function is a possible cancellation point and therefore not
extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
   This function is a possible cancellation point and therefore not
extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);
extern int vsprintf (char *__restrict __s, const char *__restrict __format,
extern int snprintf (char *__restrict __s, size_t __maxlen,
     __THROWNL __attribute__ ((__format__ (__printf__, 3, 4)));
extern int vsnprintf (char *__restrict __s, size_t __maxlen,
     __THROWNL __attribute__ ((__format__ (__printf__, 3, 0)));
extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 0))) __wur;
extern int __asprintf (char **__restrict __ptr,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3))) __wur;
extern int asprintf (char **__restrict __ptr,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3))) __wur;
extern int vdprintf (int __fd, const char *__restrict __fmt,
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));
   This function is a possible cancellation point and therefore not
extern int fscanf (FILE *__restrict __stream,
   This function is a possible cancellation point and therefore not
extern int scanf (const char *__restrict __format, ...) __wur;
extern int sscanf (const char *__restrict __s,
extern int __REDIRECT (fscanf, (FILE *__restrict __stream,
extern int __REDIRECT (scanf, (const char *__restrict __format, ...),
extern int __REDIRECT_NTH (sscanf, (const char *__restrict __s,
extern int __isoc99_fscanf (FILE *__restrict __stream,
extern int __isoc99_scanf (const char *__restrict __format, ...) __wur;
extern int __isoc99_sscanf (const char *__restrict __s,
/* Read formatted input from S into argument list ARG.
   This function is a possible cancellation point and therefore not
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
/* Read formatted input from stdin into argument list ARG.
   This function is a possible cancellation point and therefore not
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
/* Read formatted input from S into argument list ARG.  */
extern int vsscanf (const char *__restrict __s,
extern int __REDIRECT (vfscanf,
extern int __REDIRECT (vscanf, (const char *__restrict __format,
extern int __REDIRECT_NTH (vsscanf,
extern int __isoc99_vfscanf (FILE *__restrict __s,
extern int __isoc99_vscanf (const char *__restrict __format,
extern int __isoc99_vsscanf (const char *__restrict __s,
   These functions are possible cancellation points and therefore not
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);
   This function is a possible cancellation point and therefore not
extern int getchar (void);
   These functions are possible cancellation points and therefore not
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fgetc_unlocked (FILE *__stream);
   These functions are possible cancellation points and therefore not
   These functions is a possible cancellation point and therefore not
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);
   This function is a possible cancellation point and therefore not
extern int putchar (int __c);
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fputc_unlocked (int __c, FILE *__stream);
   These functions are possible cancellation points and therefore not
extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);
/* Get a word (int) from STREAM.  */
extern int getw (FILE *__stream);
/* Write a word (int) to STREAM.  */
extern int putw (int __w, FILE *__stream);
   This function is a possible cancellation point and therefore not
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
   This function is a possible cancellation point and therefore not
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern char *fgets_unlocked (char *__restrict __s, int __n,
/* Read up to (and including) a DELIMITER from STREAM into *LINEPTR
   (and null-terminate it). *LINEPTR is a pointer returned from malloc (or
   NULL), pointing to *N characters of space.  It is realloc'd as
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
                             size_t *__restrict __n, int __delimiter,
                           size_t *__restrict __n, int __delimiter,
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   This function is a possible cancellation point and therefore not
extern int fputs (const char *__restrict __s, FILE *__restrict __stream);
   This function is a possible cancellation point and therefore not
extern int puts (const char *__s);
   This function is a possible cancellation point and therefore not
extern int ungetc (int __c, FILE *__stream);
   This function is a possible cancellation point and therefore not
   This function is a possible cancellation point and therefore not
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
extern int fputs_unlocked (const char *__restrict __s,
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
   This function is a possible cancellation point and therefore not
extern int fseek (FILE *__stream, long int __off, int __whence);
   This function is a possible cancellation point and therefore not
extern long int ftell (FILE *__stream) __wur;
   This function is a possible cancellation point and therefore not
   more adequate interface for the two functions above which deal with
   file offset.  `long int' is not the right type.  These definitions
   This function is a possible cancellation point and therefore not
extern int fseeko (FILE *__stream, __off_t __off, int __whence);
   This function is a possible cancellation point and therefore not
extern int __REDIRECT (fseeko,
		       (FILE *__stream, __off64_t __off, int __whence),
   This function is a possible cancellation point and therefore not
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);
   This function is a possible cancellation point and therefore not
extern int fsetpos (FILE *__stream, const fpos_t *__pos);
extern int __REDIRECT (fgetpos, (FILE *__restrict __stream,
extern int __REDIRECT (fsetpos,
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);
extern int feof (FILE *__stream) __THROW __wur;
extern int ferror (FILE *__stream) __THROW __wur;
extern int feof_unlocked (FILE *__stream) __THROW __wur;
extern int ferror_unlocked (FILE *__stream) __THROW __wur;
/* Print a message describing the meaning of the value of errno.
   This function is a possible cancellation point and therefore not
extern int fileno (FILE *__stream) __THROW __wur;
extern int fileno_unlocked (FILE *__stream) __THROW __wur;
   This function is a possible cancellation point and therefore not
extern int pclose (FILE *__stream);
   This function is a possible cancellation point and therefore not
extern int obstack_printf (struct obstack *__restrict __obstack,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
     __THROWNL __attribute__ ((__format__ (__printf__, 2, 0)));
extern int ftrylockfile (FILE *__stream) __THROW __wur;
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
